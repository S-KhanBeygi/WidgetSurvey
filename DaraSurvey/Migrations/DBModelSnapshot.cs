// <auto-generated />
using System;
using DaraSurvey.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DaraSurvey.Migrations
{
    [DbContext(typeof(DB))]
    partial class DBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("DaraSurvey.Entities.Widget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Widgets");
                });

            modelBuilder.Entity("DaraSurvey.Services.SurveryServices.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCountable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("WidgetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.HasIndex("WidgetId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("DaraSurvey.Services.SurveryServices.Entities.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<TimeSpan?>("AllowedDelayTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime?>("ExamStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Expired")
                        .HasColumnType("datetime2");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<string>("SurveyDesignerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThankYouPageWidgetId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("WelcomePageWidgetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThankYouPageWidgetId")
                        .IsUnique();

                    b.HasIndex("WelcomePageWidgetId")
                        .IsUnique();

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("DaraSurvey.Services.SurveryServices.Entities.UserResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCountable")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("UserResponses");
                });

            modelBuilder.Entity("DaraSurvey.Services.SurveryServices.Entities.UsersSurvey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SurveyStartTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("SurveyTimeTaken")
                        .HasColumnType("time");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("UsersSurvey");
                });

            modelBuilder.Entity("DaraSurvey.Services.SurveryServices.Entities.Question", b =>
                {
                    b.HasOne("DaraSurvey.Services.SurveryServices.Entities.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DaraSurvey.Entities.Widget", "Widget")
                        .WithMany()
                        .HasForeignKey("WidgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Survey");

                    b.Navigation("Widget");
                });

            modelBuilder.Entity("DaraSurvey.Services.SurveryServices.Entities.Survey", b =>
                {
                    b.HasOne("DaraSurvey.Entities.Widget", "ThankYouPageWidget")
                        .WithOne()
                        .HasForeignKey("DaraSurvey.Services.SurveryServices.Entities.Survey", "ThankYouPageWidgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DaraSurvey.Entities.Widget", "WelcomePageWidget")
                        .WithOne()
                        .HasForeignKey("DaraSurvey.Services.SurveryServices.Entities.Survey", "WelcomePageWidgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ThankYouPageWidget");

                    b.Navigation("WelcomePageWidget");
                });

            modelBuilder.Entity("DaraSurvey.Services.SurveryServices.Entities.UserResponse", b =>
                {
                    b.HasOne("DaraSurvey.Services.SurveryServices.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DaraSurvey.Services.SurveryServices.Entities.UsersSurvey", b =>
                {
                    b.HasOne("DaraSurvey.Services.SurveryServices.Entities.Survey", "Survey")
                        .WithMany("UsersSurvey")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("DaraSurvey.Services.SurveryServices.Entities.Survey", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UsersSurvey");
                });
#pragma warning restore 612, 618
        }
    }
}
